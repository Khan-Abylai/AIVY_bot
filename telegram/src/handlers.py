import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
import requests
import config

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
START_KEYBOARD = ReplyKeyboardMarkup(
    [[KeyboardButton("/start")]],
    resize_keyboard=True,
    one_time_keyboard=True   # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–ª—è–ª–∞—Å—å –æ–¥–∏–Ω —Ä–∞–∑
)

async def check_survey_completed(update: Update, context: ContextTypes.DEFAULT_TYPE, db) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    user_id = update.message.from_user.id
    profile = await db.get_user_profile(user_id)
    survey_completed = context.user_data.get('survey_completed', False) or bool(profile)
    context.user_data['survey_completed'] = survey_completed  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ context
    return survey_completed

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db):  # –î–æ–±–∞–≤–ª—è–µ–º db –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    if not await check_survey_completed(update, context, db):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
            reply_markup=START_KEYBOARD
        )
        return
    help_text = (
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º.\n"
        "/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
        "/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/myprofile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    )
    await update.message.reply_text(help_text)

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    if not await check_survey_completed(update, context, db):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
            reply_markup=START_KEYBOARD
        )
        return
    user_id = update.message.from_user.id
    messages = await db.get_recent_messages(user_id)
    if not messages:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    history_text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for msg in messages:
        history_text += f"üë§ {msg['message']}\nü§ñ {msg['gpt_response']}\nüïí {msg['timestamp']}\n\n"
    await update.message.reply_text(history_text)

async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    if not await check_survey_completed(update, context, db):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
            reply_markup=START_KEYBOARD
        )
        return
    user_id = update.message.from_user.id
    user_text = update.message.text
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º dialogue_id
        current_dialogue_id = context.user_data.get('current_dialogue_id')
        if not current_dialogue_id:  # –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω
            current_dialogue_id = await db.create_conversation()
            context.user_data['current_dialogue_id'] = current_dialogue_id
            logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ {current_dialogue_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        response = requests.post(config.GPT_API_URL, json={"prompt": user_text})  # –ò—Å–ø–æ–ª—å–∑—É–µ–º json –≤–º–µ—Å—Ç–æ data
        response.raise_for_status()
        gpt_answer = response.json().get("response", "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
        await update.message.reply_text(gpt_answer)
        await db.save_message(user_id, user_text, gpt_answer, current_dialogue_id)  # –ü–µ—Ä–µ–¥–∞—ë–º current_dialogue_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE, db):  # –î–æ–±–∞–≤–ª—è–µ–º db
    if not await check_survey_completed(update, context, db):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
            reply_markup=START_KEYBOARD
        )
        return
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    if not await check_survey_completed(update, context, db):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
            reply_markup=START_KEYBOARD
        )
        return
    user_id = update.message.from_user.id
    profile = await db.get_user_profile(user_id)
    if profile:
        text = (
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {profile['f_name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {profile['l_name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
            f"–ü–æ–ª: {profile['sex']}\n"
            f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {profile['marital_status']}\n"
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile['job']}\n"
            f"–ì–æ—Ä–æ–¥: {profile['city']}\n"
            f"–¶–µ–ª—å: {profile['goal']}\n"
            f"–†–µ—à–µ–Ω–∏–µ: {profile.get('solution', '')}"
        )
    else:
        text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É."
    await update.message.reply_text(text, reply_markup=START_KEYBOARD)