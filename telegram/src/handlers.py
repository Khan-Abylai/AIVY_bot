import logging
from telegram import Update
from telegram.ext import ContextTypes
import requests
import config  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥—É–ª—å config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º.\n"
        "/feedback - –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n"
        "/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/myprofile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    )
    await update.message.reply_text(help_text)

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    user_id = update.message.from_user.id
    messages = await db.get_recent_messages(user_id)
    if not messages:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    history_text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for msg in messages:
        history_text += f"üë§ {msg['message']}\nü§ñ {msg['gpt_response']}\nüïí {msg['timestamp']}\n\n"
    await update.message.reply_text(history_text)

async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    user_id = update.message.from_user.id
    survey_completed = context.user_data.get('survey_completed', False)
    if survey_completed:
        user_text = update.message.text
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT API
            response = requests.post(config.GPT_API_URL, data={"prompt": user_text})
            response.raise_for_status()
            gpt_answer = response.json().get("response", "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            await update.message.reply_text(gpt_answer)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∏–ª–∏ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
            await db.save_message(user_id, user_text, gpt_answer)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE, db):
    user_id = update.message.from_user.id
    profile = await db.get_user_profile(user_id)
    if profile:
        text = (
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {profile['f_name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {profile['l_name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
            f"–ü–æ–ª: {profile['sex']}\n"
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile['job']}\n"
            f"–ì–æ—Ä–æ–¥: {profile['city']}\n"
            f"–¶–µ–ª—å: {profile['goal']}\n"
            f"–†–µ—à–µ–Ω–∏–µ: {profile.get('solution', '')}"
        )
    else:
        text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /start."
    await update.message.reply_text(text)
