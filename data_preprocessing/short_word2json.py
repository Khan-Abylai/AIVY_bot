#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import json
import logging
import argparse
from pathlib import Path
from dataclasses import dataclass, field
from typing import List, Optional

import docx

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)
logger = logging.getLogger(__name__)


@dataclass
class Message:
    role: str       # 'client' or 'psychologist'
    content: str


@dataclass
class Dialogue:
    dialogue_id: int
    topic: Optional[str]
    messages: List[Message] = field(default_factory=list)


# –ó–∞–≥–æ–ª–æ–≤–æ–∫: (üîπ)–î–∏–∞–ª–æ–≥ N [—Ç–µ–º–∞]
HEADER_PATTERN = re.compile(
    r'^\s*(?:üîπ\s*)?–î–∏–∞–ª–æ–≥\s+(\d+)(?:\s+(.+?))?\s*$'
)

# –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∂–∏/–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã
EMOJI_PATTERN = re.compile(
    "["                            
    "\U0001F300-\U0001F5FF"  # symbols & pictographs
    "\U0001F600-\U0001F64F"  # emoticons
    "\U0001F680-\U0001F6FF"  # transport & map symbols
    "\U0001F700-\U0001F77F"  # alchemical symbols
    "\U0001F780-\U0001F7FF"  # Geometric Shapes Extended
    "\U0001F800-\U0001F8FF"  # Supplemental Arrows-C
    "\U0001F900-\U0001F9FF"  # Supplemental Symbols and Pictographs
    "\U0001FA00-\U0001FA6F"  # Chess Symbols, etc.
    "]+",
    flags=re.UNICODE
)


def strip_emoji(text: str) -> str:
    """–£–¥–∞–ª–∏—Ç—å —ç–º–æ–¥–∂–∏ –∏ –Ω–µ–Ω—É–∂–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã."""
    return EMOJI_PATTERN.sub("", text).strip()


def parse_docx(path: Path) -> List[Dialogue]:
    """
    –ü—Ä–æ—á–∏—Ç–∞—Ç—å .docx –∏ —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏:
      - –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–î–∏–∞–ª–æ–≥ N [—Ç–µ–º–∞]"
      - –†–µ–ø–ª–∏–∫–∏ "–ö–ª–∏–µ–Ω—Ç:" –∏ "–ü—Å–∏—Ö–æ–ª–æ–≥:"
      - –í–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ speaker-—Ç–µ–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è
    """
    doc = docx.Document(path)
    dialogues: List[Dialogue] = []
    current: Optional[Dialogue] = None
    current_role: Optional[str] = None
    buffer: List[str] = []

    def flush_message():
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –≤ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        nonlocal buffer, current_role, current
        if current and current_role and buffer:
            content = " ".join(line.strip() for line in buffer).strip()
            if content:
                current.messages.append(Message(role=current_role, content=content))
        buffer = []

    for para in doc.paragraphs:
        raw = para.text.strip()
        if not raw:
            continue

        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∂–∏/–º–∞—Ä–∫–µ—Ä—ã
        line = strip_emoji(raw)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª–æ –ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        m = HEADER_PATTERN.match(line)
        if m:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥
            if current:
                flush_message()
                dialogues.append(current)

            dlg_id = int(m.group(1))
            topic_raw = m.group(2).strip() if m.group(2) else None
            topic = re.sub(r'[^0-9A-Za-z–ê-–Ø–∞-—è–Å—ë\s]+', '', topic_raw).strip() if topic_raw else None
            current = Dialogue(dialogue_id=dlg_id, topic=topic)
            logger.info(f"Found dialogue {dlg_id}" + (f" with topic '{topic}'" if topic else ""))
            current_role = None
            buffer = []
            continue

        # –ï—Å–ª–∏ –µ—â—ë –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if current is None:
            logger.warning(f"Ignoring line before any dialogue header: {line}")
            continue

        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –≤–∫—Ä–∞–ø–ª–µ–Ω–∏—è–º "–ö–ª–∏–µ–Ω—Ç:" –∏ "–ü—Å–∏—Ö–æ–ª–æ–≥:"
        segments = re.split(r'(?=(?:–ö–ª–∏–µ–Ω—Ç:|–ü—Å–∏—Ö–æ–ª–æ–≥:))', line)
        for seg in segments:
            text = seg.strip()
            if not text:
                continue

            if text.startswith("–ö–ª–∏–µ–Ω—Ç:"):
                flush_message()
                current_role = "client"
                buffer = [text[len("–ö–ª–∏–µ–Ω—Ç:"):].strip()]

            elif text.startswith("–ü—Å–∏—Ö–æ–ª–æ–≥:"):
                flush_message()
                current_role = "psychologist"
                buffer = [text[len("–ü—Å–∏—Ö–æ–ª–æ–≥:"):].strip()]

            else:
                # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞
                if current_role:
                    buffer.append(text)
                else:
                    logger.warning(f"Ignoring orphan text: {text}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥
    if current:
        flush_message()
        dialogues.append(current)

    return dialogues


def export_to_json(dialogues: List[Dialogue], out_path: Path):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ JSON:
    [
      {
        "dialogue_id": ...,
        "topic": "...",
        "messages": [
          {"role": "client", "content": "..."},
          ...
        ]
      },
      ...
    ]
    """
    data = []
    for dlg in dialogues:
        data.append({
            "dialogue_id": dlg.dialogue_id,
            "topic": dlg.topic,
            "messages": [
                {"role": msg.role, "content": msg.content}
                for msg in dlg.messages
            ]
        })

    out_path.write_text(json.dumps(data, ensure_ascii=False, indent=2))
    logger.info(f"Exported {len(dialogues)} dialogues to {out_path}")


def main():
    parser = argparse.ArgumentParser(
        description="Convert short psychological dialogues from .docx to JSON."
    )
    parser.add_argument(
        "input",
        type=Path,
        nargs="?",
        default=Path("../data_preprocessing/dataset_2.docx"),
        help="Path to the input .docx file (default: %(default)s)"
    )
    parser.add_argument(
        "output",
        type=Path,
        nargs="?",
        default=Path("short_dataset_2.json"),
        help="Path for the output .json file (default: %(default)s)"
    )
    args = parser.parse_args()

    if not args.input.exists():
        logger.error(f"Input file not found: {args.input}")
        return

    dialogues = parse_docx(args.input)
    if not dialogues:
        logger.error("No dialogues found.")
        return

    export_to_json(dialogues, args.output)


if __name__ == "__main__":
    main()
