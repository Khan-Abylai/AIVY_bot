import docx
import json
import re

def process_dialogue(dialogue_text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥:
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞ –∏ —Ç–µ–º—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞.
      –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —ç–º–æ–¥–∂–∏ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–î–∏–∞–ª–æ–≥", –Ω–∞–ø—Ä–∏–º–µ—Ä:
      "üîπ–î–∏–∞–ª–æ–≥ 1 ‚Äî –£—Å—Ç–∞–ª–æ—Å—Ç—å –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ (–±—É–¥–Ω–∏)"
    - –ü–∞—Ä—Å–∏—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∏–∞–ª–æ–≥–∞, –æ–ø—Ä–µ–¥–µ–ª—è—è —Å–ø–∏–∫–µ—Ä–∞ –∏ —Ç–µ–∫—Å—Ç.
    - –ü—Ä–∏–≤–æ–¥–∏—Ç –∏–º–µ–Ω–∞ "Ivy" –∏ "–ø—Å–∏—Ö–æ–ª–æ–≥" –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É "–ü—Å–∏—Ö–æ–ª–æ–≥".
    - –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å "‚Üí", –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞,
      –Ω–∞–ø—Ä–∏–º–µ—Ä, "‚Üí –ú–æ–¥—É–ª—å 1" –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ú–æ–¥—É–ª—å 1".
    """
    lines = dialogue_text.strip().split('\n')
    if not lines:
        return None

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∂–∏, –ø–æ—ç—Ç–æ–º—É –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Å–ª–æ–≤–µ—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–µ–¥ "–î–∏–∞–ª–æ–≥"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω: –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞—Ç–µ–º "–î–∏–∞–ª–æ–≥", —á–∏—Å–ª–æ, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (‚Äî) –∏ —Ç–µ–º—É.
    header = lines[0].strip()
    header_match = re.match(r"^(?:\W+)?–î–∏–∞–ª–æ–≥\s*(\d+)\s*[‚Äî-]\s*(.+)", header)
    if not header_match:
        return None

    dialogue_id = header_match.group(1).strip()
    topic = header_match.group(2).strip()
    utterances = []

    for line in lines[1:]:
        line = line.strip()
        if not line:
            continue

        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "‚Üí", —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ (–ª—é–±–æ–≥–æ –º–æ–¥—É–ª—è)
        if line.startswith("‚Üí"):
            module_info = line.lstrip("‚Üí").strip()  # —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –∏ –ø—Ä–æ–±–µ–ª—ã
            transition_text = f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {module_info}"
            utterances.append({
                "speaker": "–°–∏—Å—Ç–µ–º–∞",
                "text": transition_text
            })
            continue

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É "–°–ø–∏–∫–µ—Ä: –¢–µ–∫—Å—Ç"
        speaker_match = re.match(r"([^:]+):\s*(.+)", line)
        if speaker_match:
            speaker = speaker_match.group(1).strip()
            text = speaker_match.group(2).strip()
            # –ü—Ä–∏–≤–æ–¥–∏–º –∏–º–µ–Ω–∞ –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É: "Ivy" –∏ "–ø—Å–∏—Ö–æ–ª–æ–≥" ‚Üí "–ü—Å–∏—Ö–æ–ª–æ–≥"
            if speaker.lower() in ["ivy", "–ø—Å–∏—Ö–æ–ª–æ–≥"]:
                speaker = "–ü—Å–∏—Ö–æ–ª–æ–≥"
            utterances.append({"speaker": speaker, "text": text})
        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—é
            if utterances:
                utterances[-1]["text"] += " " + line
            else:
                utterances.append({"speaker": "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "text": line})

    return {
        "dialogue_id": dialogue_id,
        "topic": topic,
        "utterances": utterances
    }

def process_docx(file_path):
    """
    –ß–∏—Ç–∞–µ—Ç Word‚Äë—Ñ–∞–π–ª, –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –¥–∏–∞–ª–æ–≥–∏.
    –†–∞–∑–±–∏–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å –Ω–µ–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–º–æ–¥–∂–∏/—Å–∏–º–≤–æ–ª–æ–≤,
    –∑–∞—Ç–µ–º —Å–ª–æ–≤—É "–î–∏–∞–ª–æ–≥" –∏ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üîπ–î–∏–∞–ª–æ–≥ 1 ‚Äî ...", "‚≠ê–î–∏–∞–ª–æ–≥ 2 ‚Äî ...").
    """
    doc = docx.Document(file_path)
    full_text = []
    for para in doc.paragraphs:
        full_text.append(para.text)
    text = "\n".join(full_text)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –º—É–ª—å—Ç–∏—Å—Ç—Ä–æ–∫–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º.
    # –®–∞–±–ª–æ–Ω: –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ (—Å —Ñ–ª–∞–≥–æ–º MULTILINE), –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–ª–æ–≤–µ—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∑–∞—Ç–µ–º "–î–∏–∞–ª–æ–≥" –∏ —á–∏—Å–ª–æ.
    dialogues_raw = re.split(r"(?m)(?=^(?:\W+)?–î–∏–∞–ª–æ–≥\s*\d+)", text)
    dialogues = []
    for d in dialogues_raw:
        d = d.strip()
        if d:
            processed = process_dialogue(d)
            if processed:
                dialogues.append(processed)
    return dialogues

if __name__ == "__main__":
    input_file = "./short_tunning.docx"      # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É Word‚Äë—Ñ–∞–π–ª—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 53 –¥–∏–∞–ª–æ–≥–∞)
    output_file = "fine_tune_data.jsonl"       # –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSONL

    dialogues = process_docx(input_file)
    with open(output_file, "w", encoding="utf-8") as fout:
        for dialogue in dialogues:
            fout.write(json.dumps(dialogue, ensure_ascii=False) + "\n")

    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_file}")
