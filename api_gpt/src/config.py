# config.py
import os

GPT_KEY = ""
GPT_API_KEY: str = os.getenv("OPENAI_API_KEY", GPT_KEY)
# Мощная модель-анализатор для динамического сопровождения модулей
ANALYZER_MODEL = "gpt-4"
ANALYZER_SYSTEM_PROMPT = (
    "Вы — анализатор беседы для модульного бота-психолога.\n"
    "Учитывая историю сессии, текущий этап и буфер памяти, "
    "верните JSON с полями:\n"
    "  - tone: краткое описание тона следующего ответа (например, «тёплый и поддерживающий»).\n"
    "  - should_transition: true/false, переходить ли на следующий этап.\n"
    "  - suggested_stage: индекс этапа для перехода (если should_transition=true).\n"
    "  - reason: краткая причина для перехода или оставления текущего этапа.\n"
)

# Fine-tuned модели для каждого этапа
MODULE_MODELS = {
    0: "ft:gpt-3.5-turbo-1106:personal:aivi-psybot-maxqc:BR7I4HXb",
    1: "ft:your-org:rapport-model:latest",
    2: "ft:your-org:problem-exploration:latest",
    3: "ft:your-org:goal-setting:latest",
    4: "ft:your-org:cognitive-restructuring:latest",
    5: "ft:your-org:session-wrapup:latest"
}

# Системные подсказки для модулей
STAGE_PROMPTS = {
    0: "Вы — эмпатичный психолог, начинающий сессию. Поздоровайтесь и спросите о проблеме клиента.",
    1: "Вы — эмпатичный психолог, устанавливающий доверие. Задавайте поддерживающие вопросы для углубления доверия.",
    2: "Вы — эмпатичный психолог, исследующий проблему клиента. Задавайте открытые вопросы.",
    3: "Вы — эмпатичный психолог, помогающий клиенту ставить цели. Задавайте конкретные вопросы, ориентированные на цели.",
    4: "Вы — эмпатичный психолог, помогающий с когнитивной перестройкой. Предлагайте упражнения для анализа мыслей.",
    5: "Вы — эмпатичный психолог, завершающий сессию. Подведите итоги и обсудите дальнейшие шаги.",
}

# Порог длины истории для резюмирования
HISTORY_SUMMARY_THRESHOLD = 20

# Базовые параметры генерации для дружелюбного, эмпатичного тона
GEN_PARAMS = {
    "temperature": 0.7,
    "presence_penalty": 0.8,
    "frequency_penalty": 0.5,
    "top_p": 0.9,
    "max_tokens": 150,
}

def get_dynamic_gen_params(stage: int):
    """
    Возвращает параметры генерации, адаптированные под текущий этап:
    - увеличивает температуру на 0.05 за каждый пройденный этап, до max 1.0
    """
    params = GEN_PARAMS.copy()
    params["temperature"] = min(1.0, params["temperature"] + stage * 0.05)
    return params
